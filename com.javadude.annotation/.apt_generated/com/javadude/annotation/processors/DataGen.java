// CODE GENERATED BY JAVADUDE BEAN ANNOTATION PROCESSOR 
// -- DO NOT EDIT  -  THIS CODE WILL BE REGENERATED! --
package com.javadude.annotation.processors;

@javax.annotation.Generated(
    value = "com.javadude.annotation.processors.BeanAnnotationProcessor", 
    date = "Wed Sep 23 17:22:16 EDT 2015", 
    comments = "CODE GENERATED BY JAVADUDE BEAN ANNOTATION PROCESSOR; DO NOT EDIT! THIS CODE WILL BE REGENERATED!")
public abstract class DataGen  {
    public DataGen() {
        ;
    }

    private com.javadude.annotation.Bean bean_;
    protected com.javadude.annotation.Bean getBean() {
        return bean_;
    }
    public void setBean(com.javadude.annotation.Bean value)  {
        bean_ = value;
    }

    private java.lang.String packageName_;
    public java.lang.String getPackageName() {
        return packageName_;
    }
    public void setPackageName(java.lang.String value)  {
        packageName_ = value;
    }

    private java.lang.String className_;
    public java.lang.String getClassName() {
        return className_;
    }
    public void setClassName(java.lang.String value)  {
        className_ = value;
    }

    private java.lang.String classAccess_;
    public java.lang.String getClassAccess() {
        return classAccess_;
    }
    public void setClassAccess(java.lang.String value)  {
        classAccess_ = value;
    }

    private boolean atLeastOneBound_;
    public boolean isAtLeastOneBound() {
        return atLeastOneBound_;
    }
    public void setAtLeastOneBound(boolean value)  {
        atLeastOneBound_ = value;
    }

    private boolean paramStringOverridden_;
    public boolean isParamStringOverridden() {
        return paramStringOverridden_;
    }
    public void setParamStringOverridden(boolean value)  {
        paramStringOverridden_ = value;
    }

    private boolean defineSimpleEqualsAndHashCode_;
    public boolean isDefineSimpleEqualsAndHashCode() {
        return defineSimpleEqualsAndHashCode_;
    }
    public void setDefineSimpleEqualsAndHashCode(boolean value)  {
        defineSimpleEqualsAndHashCode_ = value;
    }

    private boolean createPropertyMap_;
    public boolean isCreatePropertyMap() {
        return createPropertyMap_;
    }
    public void setCreatePropertyMap(boolean value)  {
        createPropertyMap_ = value;
    }

    private final java.util.List<com.javadude.annotation.processors.PropertySpec> properties_ = new java.util.ArrayList<com.javadude.annotation.processors.PropertySpec>();
    public com.javadude.annotation.processors.PropertySpec getProperty(int i) {
        return properties_.get(i);
    }
    public java.util.List<com.javadude.annotation.processors.PropertySpec> getProperties() {
        return properties_;
    }
    public boolean propertiesContains(com.javadude.annotation.processors.PropertySpec value) {
        return properties_.contains(value);
    }
    public void addProperty(com.javadude.annotation.processors.PropertySpec value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to property");
        properties_.add(value);
    }
    public void addProperty(int i, com.javadude.annotation.processors.PropertySpec value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to property");
        properties_.add(i, value);
    }
    public void clearProperties() {
        properties_.clear();
    }

    private final java.util.List<com.javadude.annotation.processors.Listener> listeners_ = new java.util.ArrayList<com.javadude.annotation.processors.Listener>();
    public com.javadude.annotation.processors.Listener getListener(int i) {
        return listeners_.get(i);
    }
    public java.util.List<com.javadude.annotation.processors.Listener> getListeners() {
        return listeners_;
    }
    public boolean listenersContains(com.javadude.annotation.processors.Listener value) {
        return listeners_.contains(value);
    }
    public void addListener(com.javadude.annotation.processors.Listener value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to listener");
        listeners_.add(value);
    }
    public void addListener(int i, com.javadude.annotation.processors.Listener value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to listener");
        listeners_.add(i, value);
    }
    public void clearListeners() {
        listeners_.clear();
    }

    private final java.util.List<com.javadude.annotation.processors.Method> defaultMethods_ = new java.util.ArrayList<com.javadude.annotation.processors.Method>();
    public com.javadude.annotation.processors.Method getDefaultMethod(int i) {
        return defaultMethods_.get(i);
    }
    public java.util.List<com.javadude.annotation.processors.Method> getDefaultMethods() {
        return defaultMethods_;
    }
    public boolean defaultMethodsContains(com.javadude.annotation.processors.Method value) {
        return defaultMethods_.contains(value);
    }
    public void addDefaultMethod(com.javadude.annotation.processors.Method value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to defaultMethod");
        defaultMethods_.add(value);
    }
    public void addDefaultMethod(int i, com.javadude.annotation.processors.Method value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to defaultMethod");
        defaultMethods_.add(i, value);
    }
    public void clearDefaultMethods() {
        defaultMethods_.clear();
    }

    private final java.util.List<com.javadude.annotation.processors.DelegateSpec> delegates_ = new java.util.ArrayList<com.javadude.annotation.processors.DelegateSpec>();
    public com.javadude.annotation.processors.DelegateSpec getDelegate(int i) {
        return delegates_.get(i);
    }
    public java.util.List<com.javadude.annotation.processors.DelegateSpec> getDelegates() {
        return delegates_;
    }
    public boolean delegatesContains(com.javadude.annotation.processors.DelegateSpec value) {
        return delegates_.contains(value);
    }
    public void addDelegate(com.javadude.annotation.processors.DelegateSpec value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to delegate");
        delegates_.add(value);
    }
    public void addDelegate(int i, com.javadude.annotation.processors.DelegateSpec value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to delegate");
        delegates_.add(i, value);
    }
    public void clearDelegates() {
        delegates_.clear();
    }

    private final java.util.List<com.javadude.annotation.processors.Listener> nullImplementations_ = new java.util.ArrayList<com.javadude.annotation.processors.Listener>();
    public com.javadude.annotation.processors.Listener getNullImplementation(int i) {
        return nullImplementations_.get(i);
    }
    public java.util.List<com.javadude.annotation.processors.Listener> getNullImplementations() {
        return nullImplementations_;
    }
    public boolean nullImplementationsContains(com.javadude.annotation.processors.Listener value) {
        return nullImplementations_.contains(value);
    }
    public void addNullImplementation(com.javadude.annotation.processors.Listener value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to nullImplementation");
        nullImplementations_.add(value);
    }
    public void addNullImplementation(int i, com.javadude.annotation.processors.Listener value) {
        if (value == null) throw new IllegalArgumentException("Cannot add null to nullImplementation");
        nullImplementations_.add(i, value);
    }
    public void clearNullImplementations() {
        nullImplementations_.clear();
    }


    @Override
    public java.lang.String toString() {
        return getClass().getName() + '[' + paramString() + ']';
    }
    protected java.lang.String paramString() {
        return 
               "bean=" + bean_ +
               ",packageName=" + packageName_ +
               ",className=" + className_ +
               ",classAccess=" + classAccess_ +
               ",atLeastOneBound=" + atLeastOneBound_ +
               ",paramStringOverridden=" + paramStringOverridden_ +
               ",defineSimpleEqualsAndHashCode=" + defineSimpleEqualsAndHashCode_ +
               ",createPropertyMap=" + createPropertyMap_ +
               ",properties=" + properties_ +
               ",listeners=" + listeners_ +
               ",defaultMethods=" + defaultMethods_ +
               ",delegates=" + delegates_ +
               ",nullImplementations=" + nullImplementations_;
    }
}
